name: CI/CD Pipeline

on:
  push:
    branches:
      - 'main'
    tags:
      - '*'

env:
  AWS_ACCOUNT_ID: 920726247643
  AWS_REGION: us-west-1
  ECR_REPOSITORY: huseyn01/qa-test-automation
  AWS_REPOSITORY: 920726247643.dkr.ecr.us-west-1.amazonaws.com/huseyn01/qa-test-automation
  IMAGE_NAME: automation-app
  IMAGE_FULL_NAME: 920726247643.dkr.ecr.us-west-1.amazonaws.com/huseyn01/qa-test-automation:latest
  CLUSTER_NAME: qa-eks-new


jobs:
  Build-and-Push-ECR:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push the Docker image
      - name: Build, tag, and push Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_TAG: app-${{ github.sha }}
          NODE_TAG: node-${{ github.sha }}
          HUB_TAG: hub-${{ github.sha }}
        run: |
          docker build -t $AWS_REPOSITORY:$APP_TAG -f Dockerfileapp .
          docker push $AWS_REPOSITORY:$APP_TAG
          docker build -t $AWS_REPOSITORY:$HUB_TAG -f Dockerfilehub .
          docker push $AWS_REPOSITORY:$HUB_TAG
          docker build -t $AWS_REPOSITORY:$NODE_TAG -f Dockerfilenode .
          docker push $AWS_REPOSITORY:$NODE_TAG

  Deploy-EKS:
    runs-on: ubuntu-latest
    needs: Build-and-Push-ECR  # Ensures Deploy runs only after Build is successful

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials  # ðŸ”¥ Ensure credentials are configured before using AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS CLI
        run: |
          sudo apt update
          sudo apt install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          aws --version

      - name: Update kube config  # ðŸ”¥ Credentials should now be available
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to EKS
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_TAG: app-${{ github.sha }}
          NODE_TAG: node-${{ github.sha }}
          HUB_TAG: hub-${{ github.sha }}
        run: |
          kubectl create namespace automation --dry-run=client -o yaml | kubectl apply -f -
      
          sed -i "s|DOCKER_IMAGE|$AWS_REPOSITORY:$APP_TAG|g" manifests/Deployment-app.yaml
          kubectl apply -f manifests/Deployment-app.yaml -n automation
      
          sed -i "s|DOCKER_IMAGE|$AWS_REPOSITORY:$HUB_TAG|g" manifests/Deployment-hub.yaml
          kubectl apply -f manifests/Deployment-hub.yaml -n automation
      
          sed -i "s|DOCKER_IMAGE|$AWS_REPOSITORY:$NODE_TAG|g" manifests/Deployment-nodechrome.yaml
          kubectl apply -f manifests/Deployment-nodechrome.yaml -n automation


